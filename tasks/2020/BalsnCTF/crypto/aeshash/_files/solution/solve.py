import codecs
import subprocess
import struct
import codecs
import numpy as np
from subprocess import DEVNULL, PIPE
from telnetlib import Telnet


remote = Telnet('127.0.0.1', 1337)


def get_hash(buf):
    buf = codecs.encode(buf, 'base64').replace(b'\n', b'')
    remote.write(buf + b'\n')
    remote.read_until(b'[<] ')
    res = remote.read_until(b'\n')
    return int(res.decode().strip(), 16)


collected = [get_hash(b'\0' * 16)]
for c in range(4):
    for i in range(1, 7):
        buf = bytearray([0] * 16)
        buf[4*c] = i
        collected.append(get_hash(buf))
print(collected)
collected = struct.pack('<25Q', *collected)


raw = subprocess.check_output(['./tools/rec'], input=collected)
first, state = raw[:4], raw[4:]
states = subprocess.check_output(['./tools/rev'], input=state)

first = np.frombuffer(first, dtype=np.uint8)
states = np.frombuffer(states, dtype=np.uint8).reshape(-1, 4, 4)

# generated by ./tools/gen
magic = np.array([
    0x43, 0x75, 0xa8, 0x8a,
    0x4e, 0x95, 0xda, 0xae,
    0xd0, 0x1d, 0x59, 0xa5,
    0xcb, 0xef, 0x76, 0x29,
], dtype=np.uint8).reshape(4, 4)

print(states.shape)
for state in states:
    if (state[:, 0] == first).all():
        state = state ^ magic
        print(state)
        state = state.tobytes()
        assert(len(state) == 16)
        state = codecs.encode(state , 'base64').replace(b'\n', b'')
        print(state)
        remote.write(state + b'\n')
        remote.interact()
        exit(0)
